{
  "Angular Component": {
    "prefix": "a-component",
    "description": "Angular component",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:selector-name}',",
      "\ttemplateUrl: '${2:name}.component.html'",
      "})",
      "",
      "export class ${3:Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }$0",
      "}"
    ]
  },
  "Angular Component with Inline Template": {
    "prefix": "a-component-inline",
    "description": "Angular component with an inline template",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:selector-name}',",
      "\ttemplate: `$0`",
      "})",
      "",
      "export class ${2:Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }",
      "}"
    ]
  },
  "Angular Service": {
    "prefix": "a-service",
    "description": "Angular service",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ${1:Name}Service {",
      "$0",
      "\tconstructor() { }",
      "}"
    ]
  },
  "Angular Pipe": {
    "prefix": "a-pipe",
    "description": "Angular pipe",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({",
      "\tname: '${1:selector-name}'",
      "})",
      "",
      "export class ${2:Name}Pipe implements PipeTransform {",
      "\ttransform(value: any, ...args: any[]): any {",
      "\t\t$0",
      "\t}",
      "}"
    ]
  },
  "Angular Default Route Path": {
    "prefix": "a-route-path-default",
    "description": "Angular default route path",
    "body": ["{ path: '', pathMatch: 'full', redirectTo: '${1:path}' }$0"]
  },
  "Angular 404 Route Path": {
    "prefix": "a-route-path-404",
    "description": "Angular 404 route path",
    "body": ["{ path: '**', pathMatch: 'full', component: ${1:PathNotFoundComponent} }$0"]
  },
  "Angular Eager Route Path": {
    "prefix": "a-route-path-eager",
    "description": "Angular eager route path",
    "body": ["{ path: '${1:path}', component: ${2:Name}Component },"]
  },
  "Angular Lazy Route Path": {
    "prefix": "a-route-path-lazy",
    "description": "Angular lazy route path",
    "body": ["{ path: '${1:path}', loadChildren: '${2:lazy-path}#${3:lazy-module}' },"]
  },
  "Http.get": {
    "prefix": "a-http-get",
    "description": "Angular Http.get",
    "body": [
      "return this.http.get('${1:url}')",
      "\t.map((response: Response) => response.json());$0"
    ]
  },
  "HttpClient.get": {
    "prefix": "a-httpclient-get",
    "description": "Angular HttpClient.get",
    "body": ["return this.httpClient.get('${1:url}');$0"]
  },
  "Angular Http Service": {
    "prefix": "a-service-http",
    "description": "Angular service with Http",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { Http, Response } from '@angular/http';",
      "import { Observable } from 'rxjs/Observable';",
      "import 'rxjs/add/operator/map';",
      "import 'rxjs/add/operator/catch';",
      "",
      "@Injectable()",
      "export class ${1:ServiceName}Service {",
      "\tconstructor(private http: Http) { }",
      "\t$0",
      "}"
    ]
  },
  "Angular HttpClient Service": {
    "prefix": "a-service-httpclient",
    "description": "Angular service with HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpClient } from '@angular/common/http';",
      "import { catchError } from 'rxjs/operators';",
      "",
      "@Injectable()",
      "export class ${1:ServiceName}Service {",
      "\tconstructor(private httpClient: HttpClient) { }",
      "\t$0",
      "}"
    ]
  },
  "Angular HttpInterceptor for Logging": {
    "prefix": "a-http-interceptor-logging",
    "description": "Angular HttpInterceptor for Logging HttpClient",
    "body": [
      "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';",
      "import { Observable } from 'rxjs/Observable';",
      "import { tap } from 'rxjs/operators';",
      "",
      "export class LogInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst started = Date.now();",
      "\t\treturn next.handle(req).pipe(",
      "\t\t\ttap(event => {",
      "\t\t\t\tif (event instanceof HttpResponse) {",
      "\t\t\t\t\tconst elapsed = Date.now() - started;",
      "\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);",
      "\t\t\t\t}",
      "\t\t\t})",
      "\t\t);",
      "\t}",
      "}"
    ]
  },
  "Angular HttpInterceptor for Headers": {
    "prefix": "a-http-interceptor-headers",
    "description": "Angular HttpInterceptor for headers HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';",
      "import { Observable } from 'rxjs/Observable';",
      "",
      "@Injectable()",
      "export class HeaderInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst headers = req.headers",
      "\t\t\t.set('Content-Type', 'application/json');",
      "\t\tconst authReq = req.clone({ headers });",
      "\t\treturn next.handle(authReq);",
      "\t}",
      "}"
    ]
  },
  "Angular HttpInterceptor - Empty": {
    "prefix": "a-http-interceptor",
    "description": "Empty Angular HttpInterceptor for HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';",
      "import { Observable } from 'rxjs/Observable';",
      "",
      "@Injectable()",
      "export class HeaderInterceptor implements HttpInterceptor {",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\treturn next.handle(req);",
      "\t}",
      "}"
    ]
  },
  "Output Event": {
    "prefix": "a-output-event",
    "body": ["@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();"],
    "description": "Angular @Output event and emitter"
  },
  "Subscribe": {
    "prefix": "a-subscribe",
    "description": "Angular observable subscribe",
    "body": [
      "this.${1:service}.${2:function}",
      "\t.subscribe(${3:arg} => this.${4:property} = ${3:arg});",
      "$0"
    ]
  },
  "Angular Root Component": {
    "prefix": "a-component-root",
    "description": "Angular App root component",
    "body": [
      "import { Component } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:prefix-app}',",
      "\ttemplate: `",
      "\t\t<router-outlet></router-outlet>",
      "\t\t`",
      "})",
      "export class ${2:App}Component { }",
      "$0"
    ]
  },
  "Angular Root Module": {
    "prefix": "a-module-root",
    "description": "Angular Root Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { BrowserModule  } from '@angular/platform-browser';",
      "import { HttpModule } from '@angular/http';",
      "",
      "import { ${1:App}Component } from './${1:app}.component';",
      "import { AppRoutingModule } from './${1:app}.routing'; //TODO: Create ${1:app}.routing",
      "",
      "@NgModule({",
      "\timports: [",
      "\t\tBrowserModule,",
      "\t\tHttpModule,",
      "\t",
      "\t\tAppRoutingModule,",
      "\t],",
      "\tdeclarations: [${1:App}Component],",
      "\tproviders: [/* TODO: Providers go here */],",
      "\tbootstrap: [${1:App}Component],",
      "})",
      "export class ${1:App}Module { }",
      "$0"
    ]
  },
  "Angular Routing Module": {
    "prefix": "a-module-routing",
    "description": "Angular routing module file (forChild)",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { Routes, RouterModule } from '@angular/router';",
      "",
      "import { ${1:Name}Component } from './${2:name}.component';",
      "",
      "const routes: Routes = [",
      "  { path: '${3:path}', component: ${1:Name}Component },",
      "];",
      "",
      "@NgModule({",
      "  imports: [RouterModule.forChild(routes)],",
      "  exports: [RouterModule],",
      "})",
      "export class ${1:Name}RoutingModule { }",
      "",
      "export const routedComponents = [${1:Name}Component];"
    ]
  },
  "Angular Module": {
    "prefix": "a-module",
    "description": "Angular Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "",
      "import { ${1:Name}Component } from './${2:name}.component';",
      "",
      "@NgModule({",
      "\timports: [],",
      "\texports: [],",
      "\tdeclarations: [${1:Name}Component],",
      "\tproviders: [],",
      "})",
      "export class ${1:Name}Module { }",
      "$0"
    ]
  },
  "Angular Directive": {
    "prefix": "a-directive",
    "description": "Angular directive",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({ selector: '[${1:selector-name}]' })",
      "export class ${2:Name}Directive {",
      "\tconstructor() { }",
      "}"
    ]
  },
  "Angular CanActivate Guard": {
    "prefix": "a-guard-can-activate",
    "description": "Angular CanActivate guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable()",
      "export class ${1:Name}Guard implements CanActivate {",
      "\tconstructor() { }",
      "",
      "\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
  "Angular CanActivateChild Guard": {
    "prefix": "a-guard-can-activate-child",
    "description": "Angular CanActivateChild guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable()",
      "export class ${1:Name}Guard implements CanActivateChild {",
      "\tconstructor() { }",
      "",
      "\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
  "Angular CanLoad Guard": {
    "prefix": "a-guard-can-load",
    "description": "Angular CanLoad guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { CanLoad, Route } from '@angular/router';",
      "",
      "@Injectable()",
      "export class ${1:Name}Guard implements CanLoad {",
      "\tconstructor() { }",
      "",
      "\tcanLoad(route: Route) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
  "Angular CanDeactivate Guard": {
    "prefix": "a-guard-can-deactivate",
    "description": "Angular CanDeactivate guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs/Observable';",
      "",
      "import { ${1:ComponentName}Component } from './${2:filename}.component';",
      "",
      "// Consider using this interface for all CanDeactivate guards,",
      "// and have your components implement this interface, too.",
      "//",
      "//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {",
      "//",
      "// export interface CanComponentDeactivate {",
      "// canDeactivate: () => any;",
      "// }",
      "",
      "@Injectable()",
      "export class ${2:Name}Guard implements CanDeactivate<${1:ComponentName}Component> {",
      "\tcanDeactivate(",
      "\t\tcomponent: ${1:ComponentName}Component,",
      "\t\tcurrentRoute: ActivatedRouteSnapshot, ",
      "\t\tcurrentState: RouterStateSnapshot",
      "\t): Observable<boolean>|Promise<boolean>|boolean {",
      "\t\treturn false;$0",
      "\t}",
      "}"
    ]
  },
  "Angular Router Events": {
    "prefix": "a-router-events",
    "description": "Angular Router Events",
    "body": [
      "checkEvents() {",
      "\tthis.router.events.subscribe(event => {",
      "\t\tswitch (true) {",
      "\t\t\tcase event instanceof ${1:eventName}:",
      "\t\t\t\t$0",
      "\t\t\t\tbreak;",
      "",
      "\t\t\tdefault:",
      "\t\t\t\tbreak;",
      "\t\t}",
      "\t});",
      "}"
    ]
  },
  "Angular Module SkipSelf Constructor": {
    "prefix": "a-ctor-skip-self",
    "description": "Angular Module SkipSelf constructor",
    "body": [
      "constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {",
      "\tif (parentModule) {",
      "\t\tconst msg = `${1:ModuleName} has already been loaded. ",
      "\t\t\tImport ${1:ModuleName} once, only, in the root AppModule.`;",
      "\t\tthrow new Error(msg);",
      "\t}",
      "}"
    ]
  },
  "RxJS Observable Import": {
    "prefix": "rx-observable",
    "description": "RxJS Observable import",
    "body": ["import { Observable } from 'rxjs/Observable';", "$0"]
  },
  "RxJS ReplaySubject Import": {
    "prefix": "rx-replay-subject",
    "description": "RxJS ReplaySubject import",
    "body": ["import { ReplaySubject } from 'rxjs/ReplaySubject';", "$0"]
  },
  "RxJS Subject Import": {
    "prefix": "rx-subject",
    "description": "RxJS Subject import",
    "body": ["import { Subject } from 'rxjs/Subject';", "$0"]
  },
  "RxJS BehaviorSubject Import": {
    "prefix": "rx-behavior-subject",
    "description": "RxJS BehaviorSubject import",
    "body": ["import { BehaviorSubject } from 'rxjs/BehaviorSubject';", "$0"]
  },
  "RxJS Add Operator Import": {
    "prefix": "rx-add-operator",
    "description": "RxJS Add Operator import",
    "body": ["import 'rxjs/add/operator/${1:map}';", "$0"]
  },
  "RxJS Add Observable Import": {
    "prefix": "rx-add-observable",
    "description": "RxJS Add Observable import",
    "body": ["import 'rxjs/add/observable/${1:of}';", "$0"]
  },
  "RxJS Operators": {
    "prefix": "rx-operators",
    "description": "RxJS Operators import",
    "body": ["import { ${1:map} } from 'rxjs/operators';", "$0"]
  }
}
